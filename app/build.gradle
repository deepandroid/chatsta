plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.tridhya.chatsta'
    compileSdk 33

    signingConfigs {
        config {
//            keyAlias ''
//            keyPassword ''
//            storePassword ''
//            storeFile file('')
        }
    }
    defaultConfig {
        applicationId "com.tridhya.chatsta"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            shrinkResources false
        }
        release {
            minifyEnabled false
            debuggable false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    applicationVariants.all {
            // this method is use to rename your all apk weather
            // it may be signed or unsigned(debug apk)
        variant ->
            variant.outputs.each {
                    // on below line we are setting
                    // a name to our apk as GFG.apk
                output ->
                    // on below line we are adding version name to
                    // our .apk file along with the app name
                    def name = "BaseSetup(${variant.versionName}).apk"
                    // on below line we are setting the
                    // outputFile Name to our apk file
                    output.outputFileName = name
            }
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
//    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Dimens
    implementation 'com.intuit.sdp:sdp-android:1.1.0'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //api log
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.9"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

    // Room Persistence
    implementation("androidx.room:room-ktx:2.5.1")
    //noinspection KaptUsageInsteadOfKsp
    kapt("androidx.room:room-compiler:2.5.1")

    //Inject
    implementation "com.google.dagger:hilt-android:2.45"
    kapt "com.google.dagger:hilt-android-compiler:2.45"
    implementation "com.google.dagger:hilt-android-gradle-plugin:2.45"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    // Splash Screen
    implementation 'androidx.core:core-splashscreen:1.0.1'

    //ExoPlayer
    implementation 'com.google.android.exoplayer:exoplayer:2.17.1'
    implementation 'androidx.mediarouter:mediarouter:1.2.6'

    //navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.5'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.5'

    //TedImagePicker
    implementation 'io.github.ParkSangGwon:tedimagepicker:1.2.8'
    //Pin indicatior
    implementation 'io.github.chaosleung:pinview:1.4.4'

    //Ucrop
    implementation 'com.github.yalantis:ucrop:2.2.6'

    //AES
    implementation 'com.github.delight-im:Android-AdvancedWebView:v3.2.1'
    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-process:2.4.1"
    implementation "androidx.lifecycle:lifecycle-common:2.4.1"
    implementation 'com.github.3llomi:RecordView:3.1.1'

    //GLide
    //Image Process
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    implementation 'androidx.legacy:legacy-support-v4:+'
    // Stripe Android SDK
    implementation 'com.stripe:stripe-android:20.5.0'

/*    //Ucrop
    implementation 'com.github.yalantis:ucrop:2.2.6'*/
    //StackImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    //Pin indicatior
    implementation 'io.github.chaosleung:pinview:1.4.4'
}